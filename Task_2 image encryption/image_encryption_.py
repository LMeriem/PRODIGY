# -*- coding: utf-8 -*-
"""Image Encryption .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11DrIzaqXtF1UORdmU1fWdkzsaYgH2iEX
"""

from PIL import Image
import numpy as np
import matplotlib.pyplot as plt

def encrypt_image(input_path, key):
    # Load image
    img = Image.open(input_path)
    img_array = np.array(img)

    # Ensure all pixel values are properly handled (including multi-channel images)
    encrypted_array = (img_array.astype('int') + key) % 256

    # Convert back to an image
    encrypted_img = Image.fromarray(encrypted_array.astype('uint8'))

    # Display the encrypted image
    plt.imshow(encrypted_img)
    plt.title("Encrypted Image")
    plt.axis('off')
    plt.show()

    return encrypted_img

def decrypt_image(input_path, key):
    # Load encrypted image
    img = Image.open(input_path)
    img_array = np.array(img)

    # Ensure proper decryption of all pixel values
    decrypted_array = (img_array.astype('int') - key) % 256

    # Convert back to an image
    decrypted_img = Image.fromarray(decrypted_array.astype('uint8'))

    # Display the decrypted image
    plt.imshow(decrypted_img)
    plt.title("Decrypted Image")
    plt.axis('off')
    plt.show()

    return decrypted_img

# User interaction
if __name__ == "__main__":
    print("Image Encryption Tool for Colab")
    print("1. Encrypt an image")
    print("2. Decrypt an image")
    choice = int(input("Enter your choice (1 or 2): "))

    input_path = input("Enter the input image path: ")
    key = int(input("Enter an encryption/decryption key (integer): "))

    if choice == 1:
        print("Encrypting the image...")
        encrypt_image(input_path, key)
    elif choice == 2:
        print("Decrypting the image...")
        decrypt_image(input_path, key)
    else:
        print("Invalid choice!")